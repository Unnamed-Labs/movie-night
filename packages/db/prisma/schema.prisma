generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Movie {
  id          String   @id @default(cuid())
  name        String
  description String
  year        String
  runtime     String
  score       Float
  location    String
  date        String
  imageSrc    String
  imageAlt    String
  genres      Genre[]
  results     Result[]
  votes       Vote[]
  rating      Rating   @relation(fields: [ratingId], references: [id])
  ratingId    String
  createdDate DateTime @default(now())
}

model Genre {
  id     String  @id @default(cuid())
  name   String
  movies Movie[]
}

model Room {
  id           String        @id @default(cuid())
  qrCode       Bytes         @unique()
  code         String        @unique()
  amount       Int           @default(8)
  createdDate  DateTime      @default(now())
  updatedDate  DateTime      @default(now())
  participants Participant[]
  results      Result[]
  logs         AuditLog[]
}

model Participant {
  id      String  @id @default(cuid())
  name    String
  isHost  Boolean @default(false)
  isGuest Boolean @default(true)
  room    Room    @relation(fields: [roomId], references: [id])
  roomId  String
  users   User[]
  votes   Vote[]
}

model Action {
  id   String     @id @default(cuid())
  name String     @unique
  logs AuditLog[]
}

model Result {
  id          String   @id @default(cuid())
  movie       Movie    @relation(fields: [movieId], references: [id])
  movieId     String
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String
  createdDate DateTime @default(now())
}

model AuditLog {
  id          String   @id @default(cuid())
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      String
  action      Action   @relation(fields: [actionId], references: [id])
  actionId    String
  by          String
  createdDate DateTime @default(now())
}

model Vote {
  id            String      @id @default(cuid())
  movie         Movie       @relation(fields: [movieId], references: [id])
  movieId       String
  participant   Participant @relation(fields: [participantId], references: [id])
  participantId String
  createdDate   DateTime    @default(now())
}

model Rating {
  id     String  @id @default(cuid())
  name   String  @unique
  movies Movie[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  participants  Participant[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
